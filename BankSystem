import json
import os
 
class BankAccountError(Exception):
    """自定义异常类，用于处理银行账户相关的错误。"""
    pass
 
class BankAccount:
    def __init__(self, account_number, account_holder, initial_deposit=0.0):
        self.account_number = account_number
        self.account_holder = account_holder
        self.balance = initial_deposit
        if self.balance < 0:
            raise BankAccountError("Initial deposit cannot be negative.")
 
    def deposit(self, amount):
        if amount <= 0:
            raise BankAccountError("Deposit amount must be positive.")
        self.balance += amount
        print(f"Deposited {amount}. New balance is {self.balance}.")
 
    def withdraw(self, amount):
        if amount <= 0:
            raise BankAccountError("Withdrawal amount must be positive.")
        if amount > self.balance:
            raise BankAccountError("Insufficient funds.")
        self.balance -= amount
        print(f"Withdrew {amount}. New balance is {self.balance}.")
 
    def get_balance(self):
        return self.balance
 
    def to_dict(self):
        return {
            "account_number": self.account_number,
            "account_holder": self.account_holder,
            "balance": self.balance
        }
 
class BankSystem:
    def __init__(self, filename="accounts.json"):
        self.filename = filename
        self.accounts = {}
        self.load_accounts()
 
    def load_accounts(self):
        """从文件中加载账户信息。"""
        if os.path.exists(self.filename):
            with open(self.filename, "r") as file:
                data = json.load(file)
                for account_data in data:
                    account = BankAccount(**account_data)
                    self.accounts[account.account_number] = account
        else:
            print("No existing accounts found. Starting with an empty system.")
 
    def save_accounts(self):
        """将账户信息保存到文件中。"""
        with open(self.filename, "w") as file:
            json.dump([account.to_dict() for account in self.accounts.values()], file, indent=4)
 
    def create_account(self, account_number, account_holder, initial_deposit=0.0):
        if account_number in self.accounts:
            raise BankAccountError("Account number already exists.")
        self.accounts[account_number] = BankAccount(account_number, account_holder, initial_deposit)
        self.save_accounts()
        print(f"Account created for {account_holder} with account number {account_number}.")
 
    def get_account(self, account_number):
        if account_number not in self.accounts:
            raise BankAccountError("Account number not found.")
        return self.accounts[account_number]
 
def main():
    bank_system = BankSystem()
 
    try:
        # 创建账户
        bank_system.create_account("123456", "John Doe", 1000.0)
 
        # 获取账户
        account = bank_system.get_account("123456")
 
        # 存款
        account.deposit(500.0)
 
        # 取款
        account.withdraw(200.0)
 
        # 查看余额
        print(f"Account balance for {account.account_holder} is {account.get_balance()}.")
 
    except BankAccountError as e:
        print(f"Error: {e}")
 
if __name__ == "__main__":
    main()
